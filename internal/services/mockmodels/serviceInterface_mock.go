// Code generated by MockGen. DO NOT EDIT.
// Source: serviceInterface.go
//
// Generated by this command:
//
//	mockgen -source serviceInterface.go -destination mockmodels/serviceInterface_mock.go -package mockmodels
//
// Package mockmodels is a generated GoMock package.
package mockmodels

import (
	context "context"
	models "jobportalapi/internal/models"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockService) Authenticate(ctx context.Context, email, password string) (jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, email, password)
	ret0, _ := ret[0].(jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockServiceMockRecorder) Authenticate(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockService)(nil).Authenticate), ctx, email, password)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, nu models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, nu)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, nu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, nu)
}

// GetAllJobData mocks base method.
func (m *MockService) GetAllJobData() ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobData")
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobData indicates an expected call of GetAllJobData.
func (mr *MockServiceMockRecorder) GetAllJobData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobData", reflect.TypeOf((*MockService)(nil).GetAllJobData))
}

// GetCompanyAllData mocks base method.
func (m *MockService) GetCompanyAllData() ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyAllData")
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyAllData indicates an expected call of GetCompanyAllData.
func (mr *MockServiceMockRecorder) GetCompanyAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyAllData", reflect.TypeOf((*MockService)(nil).GetCompanyAllData))
}

// GetCompanyData mocks base method.
func (m *MockService) GetCompanyData(uid uint64) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyData", uid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyData indicates an expected call of GetCompanyData.
func (mr *MockServiceMockRecorder) GetCompanyData(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyData", reflect.TypeOf((*MockService)(nil).GetCompanyData), uid)
}

// GetJobByCompany mocks base method.
func (m *MockService) GetJobByCompany(uid uint64) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobByCompany", uid)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobByCompany indicates an expected call of GetJobByCompany.
func (mr *MockServiceMockRecorder) GetJobByCompany(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobByCompany", reflect.TypeOf((*MockService)(nil).GetJobByCompany), uid)
}

// GetJobData mocks base method.
func (m *MockService) GetJobData(uid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobData", uid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobData indicates an expected call of GetJobData.
func (mr *MockServiceMockRecorder) GetJobData(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobData", reflect.TypeOf((*MockService)(nil).GetJobData), uid)
}

// StoreCompany mocks base method.
func (m *MockService) StoreCompany(ctx context.Context, nc models.NewCompany) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCompany", ctx, nc)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreCompany indicates an expected call of StoreCompany.
func (mr *MockServiceMockRecorder) StoreCompany(ctx, nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCompany", reflect.TypeOf((*MockService)(nil).StoreCompany), ctx, nc)
}

// StoreJob mocks base method.
func (m *MockService) StoreJob(ctx context.Context, nc models.NewJob, cid uint64) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreJob", ctx, nc, cid)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreJob indicates an expected call of StoreJob.
func (mr *MockServiceMockRecorder) StoreJob(ctx, nc, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreJob", reflect.TypeOf((*MockService)(nil).StoreJob), ctx, nc, cid)
}
